/*
 * Redis Multi-Datacenter Client Library
 * 
 * A comprehensive Java library for Redis operations across multiple datacenters
 * with support for sync, async, and reactive programming models.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.15.0'
}

repositories {
    mavenCentral()
}

ext {
    lettuceVersion = '6.3.2.RELEASE'
    springBootVersion = '3.2.0'
    micrometerVersion = '1.12.0'
    reactorVersion = '3.6.0'
    jacksonVersion = '2.15.3'
    slf4jVersion = '2.0.9'
    logbackVersion = '1.4.11'
    testcontainersVersion = '1.19.3'
    awaitilityVersion = '4.2.0'
    resilience4jVersion = '2.1.0'
}

dependencies {
    // Core Redis client
    api "io.lettuce:lettuce-core:${lettuceVersion}"
    
    // Reactive streams
    api "io.projectreactor:reactor-core:${reactorVersion}"
    
    // Resilience4j for circuit breaker, retry, rate limiter, bulkhead, time limiter
    api "io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}"
    api "io.github.resilience4j:resilience4j-retry:${resilience4jVersion}"
    api "io.github.resilience4j:resilience4j-ratelimiter:${resilience4jVersion}"
    api "io.github.resilience4j:resilience4j-bulkhead:${resilience4jVersion}"
    api "io.github.resilience4j:resilience4j-timelimiter:${resilience4jVersion}"
    api "io.github.resilience4j:resilience4j-reactor:${resilience4jVersion}"
    api "io.github.resilience4j:resilience4j-micrometer:${resilience4jVersion}"
    api "io.github.resilience4j:resilience4j-all:${resilience4jVersion}"
    
    // Metrics and observability
    api "io.micrometer:micrometer-core:${micrometerVersion}"
    api "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"
    
    // JSON serialization
    api "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    
    // Logging
    api "org.slf4j:slf4j-api:${slf4jVersion}"
    
    // Optional Spring Boot integration
    compileOnly "org.springframework.boot:spring-boot-starter:${springBootVersion}"
    compileOnly "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}"
    
    // Test dependencies
    testImplementation libs.junit.jupiter
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
    testImplementation "io.projectreactor:reactor-test:${reactorVersion}"
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
    testImplementation "org.mockito:mockito-core:5.7.0"
    testImplementation "org.mockito:mockito-junit-jupiter:5.7.0"
    
    // PIT JUnit 5 plugin
    pitest 'org.pitest:pitest-junit5-plugin:1.2.1'
    
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 1.00 // 100% coverage requirement
            }
        }
    }
}

// PIT Mutation Testing Configuration
pitest {
    targetClasses = ['com.redis.multidc.impl.*', 'com.redis.multidc.routing.*', 'com.redis.multidc.observability.*']
    targetTests = ['com.redis.multidc.*']
    pitestVersion = '1.15.8'
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 70
    coverageThreshold = 70
    detectInlinedCode = true
    exportLineCoverage = true
    
    // Mutators configuration - use default mutators for better compatibility
    mutators = ['DEFAULTS']
    
    // Exclude certain packages/classes if needed
    excludedClasses = [
        'com.redis.multidc.config.*',
        'com.redis.multidc.autoconfigure.*',
        'com.redis.multidc.example.*',
        'com.redis.multidc.model.*'
    ]
    
    // Additional JVM args if needed
    jvmArgs = ['-Xmx1024m']
    
    // Enable verbose logging for debugging
    verbose = true
    
    // Configure test plugin
    testPlugin = 'junit5'
}

// Make sure pitest runs after tests
tasks.pitest.dependsOn test
